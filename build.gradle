plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'jacoco'
    id 'checkstyle'
    id 'org.ajoberstar.grgit' version '3.0.0'
    id 'org.ajoberstar.reckon' version '0.9.0'
    id 'org.ajoberstar.git-publish' version '2.0.0'
    id 'org.sonarqube' version '2.7'
    id 'me.champeau.gradle.jmh' version '0.4.8'
    id 'org.javamodularity.moduleplugin' version '1.4.0'
    id 'io.codearte.nexus-staging'
}

group = 'com.github.moaxcp'
description = 'dynamic graphs supporting streams and an EventBus'

reckon {
    scopeFromProp()
    snapshotFromProp()
}

javadoc {
    options.addBooleanOption('html5', true)
    options.links 'https://docs.oracle.com/en/java/javase/11/docs/api/'
    options.links 'http://greenrobot.org/files/eventbus/javadoc/3.0/'
}

sourceCompatibility = 11
targetCompatibility = 11

sourceSets {
    truth {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
    truthTest {
        compileClasspath += sourceSets.truth.output + sourceSets.main.output
        runtimeClasspath += sourceSets.truth.output + sourceSets.main.output
    }
    test {
        compileClasspath += sourceSets.truth.output
        runtimeClasspath += sourceSets.truth.output
    }
}

configurations {
    truthImplementation.extendsFrom implementation
    truthRuntimeOnly.extendsFrom runtimeOnly
}

dependencies {
    truthImplementation 'org.greenrobot:eventbus:3.1.1'
    truthImplementation 'com.google.truth:truth:0.42'
    truthImplementation 'com.google.truth.extensions:truth-java8-extension:0.42'
    truthImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    truthTestImplementation 'org.greenrobot:eventbus:3.1.1'
    truthTestImplementation 'com.google.truth:truth:0.42'
    truthTestImplementation 'com.google.truth.extensions:truth-java8-extension:0.42'
    truthTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    truthTestImplementation 'org.jmockit:jmockit:1.43'
    truthTestImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
    truthTestRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
}

dependencies {
    api 'org.greenrobot:eventbus:3.1.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.3.1'
    testImplementation 'com.google.truth:truth:0.42'
    testImplementation 'com.google.truth.extensions:truth-java8-extension:0.42'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier:3.0.3'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'

    checkstyle 'com.puppycrawl.tools:checkstyle:8.12'
}

dependencies {
    jmh 'com.google.guava:guava:27.0.1-jre'
}

repositories {
    jcenter()
}

test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }

    systemProperty "com.google.common.truth.disable_stack_trace_cleaning", "true"
}

gitPublish {
    repoUri = "https://github.com/moaxcp/graphs.git"
    branch = 'gh-pages'
    contents {
        from 'build/docs'
        from 'build/reports'
    }
    commitMessage = 'Publishing from gradle.'
}

task truthTest(type: Test) {
    description = 'Runs the truth tests.'
    group = 'verification'
    testClassesDirs = sourceSets.truthTest.output.classesDirs
    classpath = sourceSets.truthTest.runtimeClasspath
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed"
    }

    reports {
        html.enabled = true
    }
}

check.dependsOn truthTest

jmh {
//    include = ['findLastEdge']
    timeUnit = 'ms'
//    jvmArgs = ['-ea']
//    iterations = 1
//    fork = 1
//    failOnError = true
//    warmupIterations = 1
//    timeout = '10s'
//    timeOnIteration = '3s'
//    benchmarkMode = ['thrpt']
    resultsFile = project.file("${project.projectDir}/reports/jmh/optimized.txt")
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    archiveClassifier = 'javadoc'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId = 'graphs'
            from components.java
            artifact sourcesJar
            artifact javadocJar
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = project.name
                description = project.description
                url = 'https://github.com/moaxcp/graphs'
                licenses {
                    license {
                        name = 'The MIT License (MIT)'
                        url = 'http://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'moaxcp'
                        name = 'John Mercier'
                        email = 'moaxcp@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/moaxcp/graphs.git'
                    developerConnection = 'scm:git:git@github.com:moaxcp/graphs.git'
                    url = 'https://github.com/moaxcp/graphs'
                }
            }
            repositories {
                maven {
                    def releasesRepoUrl = 'https://oss.sonatype.org/service/local/staging/deploy/maven2'
                    def snapshotsRepoUrl = 'https://oss.sonatype.org/content/repositories/snapshots'
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                    credentials {
                        username System.getProperty('nexus.username')
                        password System.getProperty('nexus.password')
                    }
                }
            }
        }
    }
}

signing {
    sign publishing.publications.mavenJava
}